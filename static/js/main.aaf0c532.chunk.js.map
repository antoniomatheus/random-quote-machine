{"version":3,"sources":["styles/global.js","components/QuoteBox/styles.js","components/QuoteBox/index.js","config/api.js","components/Main/styles.js","components/Main/index.js","App.js","index.js"],"names":["createGlobalStyle","Box","styled","div","Quote","QuoteText","p","props","color","QuoteSymbolLeft","QuoteSymbolRight","Author","ShareButtons","ShareLink","a","attrs","type","backgroundColor","darken","QuoteBox","quote","author","tweetText","encodeURIComponent","id","href","target","api","axios","create","baseURL","Container","leftColor","rightColor","Button","button","Main","state","fetchNewQuote","bind","this","get","data","setState","content","centralHue","Math","floor","random","primaryColor","onClick","Component","App","ReactDOM","render","document","getElementById"],"mappings":"onBAEeA,kBAAf,K,uxCCCO,IAAMC,EAAMC,IAAOC,IAAV,KAOHC,EAAQF,IAAOC,IAAV,KAMLE,EAAYH,IAAOI,EAAV,IAIX,SAAAC,GAAK,OAAIA,EAAMC,QAGbC,EAAkBP,IAAOC,IAAV,IAEjB,SAAAI,GAAK,OAAIA,EAAMC,QAGbE,EAAmBR,IAAOC,IAAV,IAGlB,SAAAI,GAAK,OAAIA,EAAMC,QAGbG,EAAST,IAAOI,EAAV,IAER,SAAAC,GAAK,OAAIA,EAAMC,QAIbI,EAAeV,IAAOC,IAAV,KAKZU,EAAYX,IAAOY,EAAEC,MAAM,CAAEC,KAAM,UAAvBd,CAAH,IACA,SAAAK,GAAK,OAAIA,EAAMU,iBAUb,SAAAV,GAClB,IAAMC,EAAQD,EAAMU,gBACpB,OAAOC,YAAO,GAAKV,KC3CV,SAASW,EAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,OAAQb,EAAS,EAATA,MAC1Cc,EAAYC,mBAAmB,GAAD,OAAIH,EAAJ,cAAeC,EAAf,MAEpC,OACE,kBAACpB,EAAD,CAAKuB,GAAG,aACN,kBAACpB,EAAD,KACE,kBAACK,EAAD,CAAiBD,MAAOA,GACtB,kBAAC,IAAD,OAEF,kBAACH,EAAD,CAAWG,MAAOA,EAAOgB,GAAG,QACzBJ,GAEH,kBAACV,EAAD,CAAkBF,MAAOA,GACvB,kBAAC,IAAD,QAGJ,kBAACG,EAAD,CAAQH,MAAOA,EAAOgB,GAAG,UACtBH,GAEH,kBAACT,EAAD,KACE,kBAACC,EAAD,CACEW,GAAG,cACHP,gBAAiBT,EACjBiB,KAAI,gDAA2CH,GAC/CI,OAAO,UAEP,kBAAC,IAAD,S,YCnCKC,E,OAJHC,EAAMC,OAAO,CACvBC,QAAS,4B,igBCAJ,IAAMC,EAAY7B,IAAOC,IAAV,IACN,SAAAI,GAAK,wCACUA,EAAMyB,UADhB,aAC8BzB,EAAM0B,WADpC,OASRC,EAAShC,IAAOiC,OAAOpB,MAAM,CACxCC,KAAM,UADcd,CAAH,IAQR,SAAAK,GAAK,OAAIA,EAAMC,OAMFU,YAAO,GAAK,SC4BrBkB,E,YA9Cb,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KACD8B,MAAQ,CACXjB,MAAO,GACPC,OAAQ,IAGV,EAAKiB,cAAgB,EAAKA,cAAcC,KAAnB,gBAPJ,E,yLAWjBC,KAAKF,gB,0QAIkBX,EAAIc,IAAI,W,gBAAvBC,E,EAAAA,KAERF,KAAKG,SAAS,CACZvB,MAAOsB,EAAKE,QACZvB,OAAQqB,EAAKrB,S,mIAIP,IAAD,EACmBmB,KAAKH,MAAvBjB,EADD,EACCA,MAAOC,EADR,EACQA,OAETwB,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAY,cAAUJ,EAAV,eACZb,EAAS,cAAUa,EAAa,GAAvB,eACTZ,EAAU,cAAUY,EAAa,GAAvB,eAEhB,OACE,kBAACd,EAAD,CAAWC,UAAWA,EAAWC,WAAYA,GAC3C,kBAACd,EAAD,CAAUC,MAAOA,EAAOC,OAAQA,EAAQb,MAAOyC,IAC/C,kBAACf,EAAD,CACEV,GAAG,YACH0B,QAASV,KAAKF,cACd9B,MAAOyC,GAHT,kB,GAnCWE,aCMJC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.aaf0c532.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    outline: 0;\n    font-family: 'Roboto', sans-serif;\n  }\n\n  body {\n    -webkit-font-smoothing: antialiased !important;\n  }\n\n  button, a {\n    cursor: pointer;\n  }\n\n`;\n","import styled from 'styled-components';\nimport { darken } from 'polished';\n\nexport const Box = styled.div`\n  background-color: #fff;\n  border-radius: 4px;\n  padding: 20px;\n  width: 600px;\n`;\n\nexport const Quote = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n`;\n\nexport const QuoteText = styled.p`\n  font-size: 30px;\n  text-align: center;\n  padding: 6px;\n  color: ${props => props.color};\n`;\n\nexport const QuoteSymbolLeft = styled.div`\n  font-size: 36px;\n  color: ${props => props.color};\n`;\n\nexport const QuoteSymbolRight = styled.div`\n  font-size: 36px;\n  align-self: flex-end;\n  color: ${props => props.color};\n`;\n\nexport const Author = styled.p`\n  margin: 30px;\n  color: ${props => props.color};\n  font-style: italic;\n`;\n\nexport const ShareButtons = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const ShareLink = styled.a.attrs({ type: 'button' })`\n  background-color: ${props => props.backgroundColor};\n  color: #fff;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 8px 12px;\n  border: none;\n  border-radius: 4px;\n\n  &:hover {\n    transition: all 0.2s;\n    background-color: ${props => {\n      const color = props.backgroundColor;\n      return darken(0.1, color);\n    }};\n  }\n`;\n","import React from 'react';\nimport { FaQuoteLeft, FaQuoteRight, FaTwitter } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\n\nimport {\n  Box,\n  Quote,\n  QuoteSymbolLeft,\n  QuoteSymbolRight,\n  QuoteText,\n  ShareButtons,\n  Author,\n  ShareLink,\n} from './styles';\n\nexport default function QuoteBox({ quote, author, color }) {\n  const tweetText = encodeURIComponent(`${quote} - ${author}.`);\n\n  return (\n    <Box id=\"quote-box\">\n      <Quote>\n        <QuoteSymbolLeft color={color}>\n          <FaQuoteLeft />\n        </QuoteSymbolLeft>\n        <QuoteText color={color} id=\"text\">\n          {quote}\n        </QuoteText>\n        <QuoteSymbolRight color={color}>\n          <FaQuoteRight />\n        </QuoteSymbolRight>\n      </Quote>\n      <Author color={color} id=\"author\">\n        {author}\n      </Author>\n      <ShareButtons>\n        <ShareLink\n          id=\"tweet-quote\"\n          backgroundColor={color}\n          href={`https://twitter.com/intent/tweet?text=${tweetText}`}\n          target=\"_blank\"\n        >\n          <FaTwitter />\n        </ShareLink>\n      </ShareButtons>\n    </Box>\n  );\n}\n\nQuoteBox.propTypes = {\n  quote: PropTypes.string.isRequired,\n  author: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.quotable.io',\n});\n\nexport default api;\n","import styled from 'styled-components';\nimport { darken } from 'polished';\n\nexport const Container = styled.div`\n  background: ${props =>\n    `linear-gradient(-45deg, ${props.leftColor}, ${props.rightColor})`};\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Button = styled.button.attrs({\n  type: 'button',\n})`\n  position: absolute;\n  bottom: 150px;\n  padding: 10px;\n  font-size: 20px;\n  background-color: #fff;\n  color: ${props => props.color};\n  border: none;\n  border-radius: 4px;\n\n  &:hover {\n    transition: all 0.2s;\n    background-color: ${darken(0.1, '#fff')};\n  }\n`;\n","import React, { Component } from 'react';\n\nimport QuoteBox from '../QuoteBox';\n\nimport api from '../../config/api';\n\nimport { Container, Button } from './styles';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      author: '',\n    };\n\n    this.fetchNewQuote = this.fetchNewQuote.bind(this);\n  }\n\n  async componentDidMount() {\n    this.fetchNewQuote();\n  }\n\n  async fetchNewQuote() {\n    const { data } = await api.get('/random');\n\n    this.setState({\n      quote: data.content,\n      author: data.author,\n    });\n  }\n\n  render() {\n    const { quote, author } = this.state;\n\n    const centralHue = Math.floor(Math.random() * 360);\n    const primaryColor = `hsl(${centralHue}, 50%, 50%)`;\n    const leftColor = `hsl(${centralHue + 30}, 50%, 50%)`;\n    const rightColor = `hsl(${centralHue - 30}, 50%, 50%)`;\n\n    return (\n      <Container leftColor={leftColor} rightColor={rightColor}>\n        <QuoteBox quote={quote} author={author} color={primaryColor} />\n        <Button\n          id=\"new-quote\"\n          onClick={this.fetchNewQuote}\n          color={primaryColor}\n        >\n          New Quote\n        </Button>\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\n\nimport GlobalStyle from './styles/global';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <>\n      <Main />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}